{
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"BasicResponse": {
				"properties": {
					"message": {
						"type": "string"
					}
				},
				"required": [
					"message"
				],
				"type": "object",
				"description": "Basic JSON response for Controllers"
			},
			"DateResponse": {
				"properties": {
					"date": {
						"type": "string"
					},
					"message": {
						"type": "string"
					}
				},
				"required": [
					"date",
					"message"
				],
				"type": "object",
				"description": "Basic JSON response with the current date for Controllers"
			},
			"IUserUpdate": {
				"properties": {
					"name": {
						"type": "string"
					},
					"age": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"age"
				],
				"type": "object",
				"additionalProperties": false
			},
			"KataLevel": {
				"enum": [
					"Basic",
					"Medium",
					"High"
				],
				"type": "string"
			},
			"IAuthRegister": {
				"properties": {
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"age": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"email",
					"password",
					"age"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IAuthLogin": {
				"properties": {
					"email": {
						"type": "string"
					},
					"password": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IKataUpdate": {
				"properties": {
					"name": {
						"type": "string"
					},
					"description": {
						"type": "string"
					},
					"level": {
						"$ref": "#/components/schemas/KataLevel"
					},
					"intents": {
						"type": "number",
						"format": "double"
					},
					"solution": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"description",
					"level",
					"intents",
					"solution"
				],
				"type": "object",
				"additionalProperties": false
			},
			"IKataStars": {
				"properties": {
					"user": {
						"type": "string"
					},
					"stars": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"user",
					"stars"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {}
	},
	"info": {
		"title": "intensivebackendopenbootcamp",
		"version": "1.0.0",
		"description": "Intensive course of Open Bootcamp with Node and Express in TypeScript - Backend",
		"license": {
			"name": "MIT"
		},
		"contact": {
			"name": "Victor Canas"
		}
	},
	"openapi": "3.0.0",
	"paths": {
		"/api/hello": {
			"get": {
				"operationId": "GetMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BasicResponse"
								}
							}
						}
					}
				},
				"tags": [
					"HelloController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/goodbye": {
			"get": {
				"operationId": "GetDateMessage",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DateResponse"
								}
							}
						}
					}
				},
				"tags": [
					"GoodbyeController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "name",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/users": {
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "All user o user found by iD",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to retreive the Users in the Collection \"Users\" of DB",
				"tags": [
					"UsersController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Id of user to retreive (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"delete": {
				"operationId": "DeleteUser",
				"responses": {
					"200": {
						"description": "message informing if deletion was correct",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to delete the Users in the Collection \"Users\" of DB",
				"tags": [
					"UsersController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of user to delete (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to update a User in the Collection \"Users\" of DB",
				"tags": [
					"UsersController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of user to update",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "IUpdateUser interface to set the new values",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IUserUpdate"
							}
						}
					}
				}
			}
		},
		"/api/users/katas": {
			"get": {
				"operationId": "GetKatas",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"UsersController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "level",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/KataLevel"
						}
					}
				]
			}
		},
		"/api/auth/register": {
			"post": {
				"operationId": "RegisterUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"AuthController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IAuthRegister"
							}
						}
					}
				}
			}
		},
		"/api/auth/login": {
			"post": {
				"operationId": "LoginUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"AuthController"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IAuthLogin"
							}
						}
					}
				}
			}
		},
		"/api/auth/me": {
			"get": {
				"operationId": "GetLoggedUser",
				"responses": {
					"200": {
						"description": "All user o user found by iD",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to retreive the User in the Collection \"Users\" of DB\nMiddleware: Validate JWT\nIn headers you must add the x-access-token with a valid JWT",
				"tags": [
					"AuthController"
				],
				"security": [],
				"parameters": [
					{
						"description": "ID of user to retrieve (optional)",
						"in": "query",
						"name": "id",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/api/auth/logout": {
			"post": {
				"operationId": "LogoutUser",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"tags": [
					"AuthController"
				],
				"security": [],
				"parameters": []
			}
		},
		"/api/katas": {
			"get": {
				"operationId": "GetKatas",
				"responses": {
					"200": {
						"description": "All katas o kata found by ID",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to retreive the katas in the Collection \"Katas\" of DB",
				"tags": [
					"KatasController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "page",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "limit",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "order",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Id of Kata to retreive (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "level",
						"required": false,
						"schema": {
							"$ref": "#/components/schemas/KataLevel"
						}
					}
				]
			},
			"post": {
				"operationId": "CreateKata",
				"responses": {
					"200": {
						"description": "message informing if creating was correct",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to create a Kata in the Collection \"Katas\" of DB",
				"tags": [
					"KatasController"
				],
				"security": [],
				"parameters": [
					{
						"in": "query",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Kata interface to create",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IKataUpdate"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteKata",
				"responses": {
					"200": {
						"description": "message informing if deletion was correct",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to delete the Katas in the Collection \"Katas\" of DB",
				"tags": [
					"KatasController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of Kata to delete (optional)",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "userId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateKata",
				"responses": {
					"200": {
						"description": "message informing if updating was correct",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to update a Kata in the Collection \"Katas\" of DB",
				"tags": [
					"KatasController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of Kata to update",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Id of logged user to update",
						"in": "query",
						"name": "userId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Kata interface to update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IKataUpdate"
							}
						}
					}
				}
			}
		},
		"/api/katas/stars": {
			"put": {
				"operationId": "UpdateKataStars",
				"responses": {
					"200": {
						"description": "message informing if updating was correct",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to update stars of a Kata in the Collection \"Katas\" of DB",
				"tags": [
					"KatasController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of Kata to update stars",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Kata stars interface to update",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/IKataStars"
							}
						}
					}
				}
			}
		},
		"/api/katas/resolve": {
			"put": {
				"operationId": "SendKataSolution",
				"responses": {
					"200": {
						"description": "message informing if checking was correct",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Endpoint to send a Kata solution in the Collection \"Katas\" of DB",
				"tags": [
					"KatasController"
				],
				"security": [],
				"parameters": [
					{
						"description": "Id of Kata to check",
						"in": "query",
						"name": "id",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Id of logged user to update participants list",
						"in": "query",
						"name": "userId",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "Kata solution of user to check if it is correct",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"type": "string"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}